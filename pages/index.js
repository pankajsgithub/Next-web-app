import Head from 'next/head'
import Image from 'next/image'
import Navbar from '../components/navbar'
import ImageUrlBuilder from '@sanity/image-url'
import styles from '../styles/Home.module.css'
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router'

export default function Home({ posts }) {
  console.log('Post Data :: ', posts)

  const router = useRouter();

  const [mappedPosts, setMappedPosts] = useState([])
  useEffect(() => {
    if (posts.length) {

      const imgUrl = ImageUrlBuilder({
        projectId: 'ru2aqp7e',
        dataset: 'production'
      })

      setMappedPosts(
        posts.map(post => {
          return {
            ...post,
            mainImage: imgUrl.image(post.mainImage).width(500).height(250)
          }
        })
      )

    } else {
      setMappedPosts([])
    }

  }, [posts])

  return (
    <div>
      <Head>
        <title>Next Web Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <div className={styles.main}>
        <span className={styles.intro}>
          Welcome to <a href="https://nextjs.org"><span>Next.js</span> </a> + <a href='https://www.sanity.io/'><span>Sanity.io !</span></a>
        </span>
        <div className={styles.feed}>
          {mappedPosts.length ? mappedPosts.map((post, index) => {
            return (
              <div onClick={() => router.push(`/post/${post.slug.current}`)} key={index} className={styles.post}>
                <h3> {post.title} </h3>
                <img className={styles.mainImage} alt='imgText' src={post.mainImage} />
              </div>
            )
          }) : <>No Post</>}
        </div>
      </div>
    </div>
  )
}


export const getServerSideProps = async pageContext => {
  const query = encodeURIComponent('*[ _type == "post"]');
  const url = `https://ru2aqp7e.api.sanity.io/v1/data/query/production?query=${query}`
  const result = await fetch(url).then(res => res.json());

  if (!result.result || !result.result.length) {
    return {
      props: {
        posts: []
      }
    }
  }
  else {
    return {
      props: {
        posts: result.result
      }
    }
  }
}
